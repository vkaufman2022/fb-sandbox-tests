// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace fbsandboxtests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Create User Test Set")]
    [NUnit.Framework.CategoryAttribute("createSingleUser")]
    public partial class CreateUserTestSetFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "createSingleUser"};
        
#line 1 "CreateUser.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Create User Test Set", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify that user with different name and balance successfully created")]
        [NUnit.Framework.CategoryAttribute("successfullyCreated")]
        [NUnit.Framework.TestCaseAttribute("Sam", "1000", null)]
        [NUnit.Framework.TestCaseAttribute("Sam", "1000", null)]
        [NUnit.Framework.TestCaseAttribute("Jhon", "0", null)]
        [NUnit.Framework.TestCaseAttribute("@my", "100", null)]
        [NUnit.Framework.TestCaseAttribute("100", "200", null)]
        [NUnit.Framework.TestCaseAttribute("", "300", null)]
        public void VerifyThatUserWithDifferentNameAndBalanceSuccessfullyCreated(string name, string balance, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "successfullyCreated"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("name", name);
            argumentsOfScenario.Add("balance", balance);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that user with different name and balance successfully created", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 5
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "balance"});
                table1.AddRow(new string[] {
                            string.Format("{0}", name),
                            string.Format("{0}", balance)});
#line 6
 testRunner.Given("new users details", ((string)(null)), table1, "Given ");
#line hidden
#line 9
 testRunner.When("1 users successfully created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "balance"});
                table2.AddRow(new string[] {
                            string.Format("{0}", name),
                            string.Format("{0}", balance)});
#line 10
 testRunner.Then("the following response was got", ((string)(null)), table2, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify that several users successfully created")]
        [NUnit.Framework.CategoryAttribute("severalUsers")]
        public void VerifyThatSeveralUsersSuccessfullyCreated()
        {
            string[] tagsOfScenario = new string[] {
                    "severalUsers"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that several users successfully created", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 28
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "balance"});
                table3.AddRow(new string[] {
                            "Edgar Allan Poe",
                            "100"});
                table3.AddRow(new string[] {
                            "Herman Melville",
                            "200"});
                table3.AddRow(new string[] {
                            "Walt Whitman",
                            "300"});
                table3.AddRow(new string[] {
                            "Mark Twain",
                            "400"});
                table3.AddRow(new string[] {
                            "T.S. Eliot",
                            "500"});
                table3.AddRow(new string[] {
                            "William Faulkner",
                            "600"});
                table3.AddRow(new string[] {
                            "Tennessee Williams",
                            "700"});
                table3.AddRow(new string[] {
                            "Kurt Vonnegut",
                            "800"});
                table3.AddRow(new string[] {
                            "Emily Dickinson",
                            "900"});
                table3.AddRow(new string[] {
                            "Joseph Heller",
                            "1000"});
#line 29
 testRunner.Given("new users details", ((string)(null)), table3, "Given ");
#line hidden
#line 41
 testRunner.When("10 users successfully created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "balance"});
                table4.AddRow(new string[] {
                            "Edgar Allan Poe",
                            "100"});
                table4.AddRow(new string[] {
                            "Herman Melville",
                            "200"});
                table4.AddRow(new string[] {
                            "Walt Whitman",
                            "300"});
                table4.AddRow(new string[] {
                            "Mark Twain",
                            "400"});
                table4.AddRow(new string[] {
                            "T.S. Eliot",
                            "500"});
                table4.AddRow(new string[] {
                            "William Faulkner",
                            "600"});
                table4.AddRow(new string[] {
                            "Tennessee Williams",
                            "700"});
                table4.AddRow(new string[] {
                            "Kurt Vonnegut",
                            "800"});
                table4.AddRow(new string[] {
                            "Emily Dickinson",
                            "900"});
                table4.AddRow(new string[] {
                            "Joseph Heller",
                            "1000"});
#line 42
 testRunner.Then("the following response was got", ((string)(null)), table4, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify that 100 users successfully created")]
        [NUnit.Framework.CategoryAttribute("100Users")]
        public void VerifyThat100UsersSuccessfullyCreated()
        {
            string[] tagsOfScenario = new string[] {
                    "100Users"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that 100 users successfully created", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 56
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 57
 testRunner.When("provided 100 valid users details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 58
 testRunner.Then("100 users successfully created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify that unauthorized operator could not create user")]
        [NUnit.Framework.CategoryAttribute("unauthorized")]
        public void VerifyThatUnauthorizedOperatorCouldNotCreateUser()
        {
            string[] tagsOfScenario = new string[] {
                    "unauthorized"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that unauthorized operator could not create user", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 61
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "balance"});
                table5.AddRow(new string[] {
                            "Sam",
                            "100"});
#line 62
 testRunner.Given("new users details", ((string)(null)), table5, "Given ");
#line hidden
#line 65
 testRunner.When("unauthorized operator with email vk@gmail.com creates user", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 66
 testRunner.Then("the following error got : status code=401, token=vk@gmail.com, msg=Bad auth token" +
                        "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify that user with invalid name or balance could not be created")]
        [NUnit.Framework.CategoryAttribute("invalidUserDetails")]
        [NUnit.Framework.TestCaseAttribute("Joe", "-1000", "400", "Balance can not be negative", null)]
        [NUnit.Framework.TestCaseAttribute("Ann", "1.3", "500", "Internal server error", null)]
        [NUnit.Framework.TestCaseAttribute("Amy", "million", "500", "Internal server error", null)]
        public void VerifyThatUserWithInvalidNameOrBalanceCouldNotBeCreated(string name, string balance, string code, string message, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "invalidUserDetails"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("name", name);
            argumentsOfScenario.Add("balance", balance);
            argumentsOfScenario.Add("code", code);
            argumentsOfScenario.Add("message", message);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify that user with invalid name or balance could not be created", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 69
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "balance"});
                table6.AddRow(new string[] {
                            string.Format("{0}", name),
                            string.Format("{0}", balance)});
#line 70
 testRunner.Given("new users details", ((string)(null)), table6, "Given ");
#line hidden
#line 73
 testRunner.When("user failed to create", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 74
 testRunner.Then(string.Format("the following error got - status code={0}, msg={1}", code, message), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
